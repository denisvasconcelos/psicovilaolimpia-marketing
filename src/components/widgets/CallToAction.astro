---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { Icon } from 'astro-icon/components';
import type { CallToAction, Widget } from '~/types';

interface Props extends Widget {
  title?: string;
  subtitle?: string;
  tagline?: string;
  callToAction?: CallToAction;
  actions?: string | CallToAction[];
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  actions = await Astro.slots.render('actions'),

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <div class="bg-gradient-to-r from-[#046a80] to-[#73CEE1] rounded-lg p-6 md:p-8 lg:p-12 text-white text-center">
    {tagline && (
      <p class="text-base text-white/90 font-bold tracking-wide uppercase mb-2">
        {tagline}
      </p>
    )}
    
    {title && (
      <h2 class="text-3xl md:text-4xl font-bold tracking-tighter mb-4 font-heading text-white">
        {title}
      </h2>
    )}
    
    {subtitle && (
      <p class="text-lg md:text-xl text-white/90 mb-8 max-w-2xl mx-auto">
        {subtitle}
      </p>
    )}
    
    {actions && (
      <div class="flex flex-col sm:flex-row sm:justify-center gap-4">
        {Array.isArray(actions) ? (
          actions.map((action) => (
            <a
              href={action.href}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-block bg-white text-[#046a80] font-semibold py-2 px-6 rounded-md hover:bg-gray-100 transition duration-300"
            >
              {action.icon && <Icon name={action.icon} class="w-5 h-5 mr-2 inline" />}
              {action.text}
            </a>
          ))
        ) : (
          <Fragment set:html={actions} />
        )}
      </div>
    )}
  </div>
</WidgetWrapper>
